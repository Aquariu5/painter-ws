{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\n\nclass Toolbar {\n  //wsId = null;\n  constructor() {\n    this.toolbar = null;\n    this.canvas = null;\n    this.context = null;\n    this.toggle = false;\n    this.ws = null;\n    this.names = [];\n\n    this.down = e => {\n      this.toggle = true;\n      this.context.beginPath();\n      this.context.moveTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n      this.ws.send(JSON.stringify({\n        method: 'paint',\n        x: e.pageX - e.target.offsetLeft,\n        y: e.pageY - e.target.offsetTop,\n        action: 'down'\n      }));\n    };\n\n    this.up = e => {\n      this.toggle = false;\n    };\n\n    this.move = e => {\n      if (this.toggle) {\n        this.context.lineTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n        this.ws.send(JSON.stringify({\n          method: 'paint',\n          x: e.pageX - e.target.offsetLeft,\n          y: e.pageY - e.target.offsetTop,\n          action: 'move'\n        }));\n        this.context.stroke(); //toolbar.context.fillRect(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop, 2, 2);\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n  setToolbar(val) {\n    this.toolbar = val;\n  }\n\n  addName(name) {\n    //this.names = [...this.names, {name, x: 0, y: 0}];\n    this.names.push({\n      name,\n      x: 0,\n      y: 0\n    });\n  }\n\n  changePositionByName(name, newX, newY) {\n    console.log('thisnames', this.names.length);\n    let idx = this.names.findIndex(el => el.name == name);\n    console.log('idx', idx);\n    this.names[idx] = {\n      name,\n      x: newX,\n      y: newY\n    }; //console.log('updd', this.names);\n  }\n\n  setWs(ws) {\n    this.ws = ws;\n  }\n\n  setCanvas(val) {\n    this.canvas = val;\n    this.context = this.canvas.getContext('2d');\n  }\n\n  draw(x, y, action) {\n    console.log('draw', x, y); //this.context.fillRect(x, y, 2, 2);\n\n    switch (action) {\n      case 'down':\n        this.context.beginPath();\n        this.context.moveTo(x, y);\n        break;\n\n      case 'move':\n        this.context.lineTo(x, y);\n        this.context.stroke();\n        break;\n    } // this.context.beginPath();\n    // this.context.moveTo(x, y);\n    // this.context.lineTo(x, y);\n    // this.context.stroke();\n\n  }\n\n}\n\nexport default new Toolbar();","map":{"version":3,"sources":["/home/operatorzhukov/Документы/websocket/front/src/store/toolbar.js"],"names":["makeAutoObservable","Toolbar","constructor","toolbar","canvas","context","toggle","ws","names","down","e","beginPath","moveTo","pageX","target","offsetLeft","pageY","offsetTop","send","JSON","stringify","method","x","y","action","up","move","lineTo","stroke","setToolbar","val","addName","name","push","changePositionByName","newX","newY","console","log","length","idx","findIndex","el","setWs","setCanvas","getContext","draw"],"mappings":"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","sourcesContent":["import {makeAutoObservable} from 'mobx'\n\nclass Toolbar {\n    toolbar = null;\n    canvas = null;\n    context = null;\n    toggle = false;\n    ws = null;\n    names = [];\n    //wsId = null;\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    setToolbar(val) {\n        this.toolbar = val;\n    }\n\n    addName(name) {\n        //this.names = [...this.names, {name, x: 0, y: 0}];\n        this.names.push({name, x: 0, y: 0});\n    }\n\n    changePositionByName(name, newX, newY) {\n        console.log('thisnames', this.names.length);\n        let idx = this.names.findIndex(el => el.name == name);\n        console.log('idx', idx);\n        this.names[idx] = {name, x: newX, y: newY};\n        //console.log('updd', this.names);\n    }\n\n    setWs(ws) {\n        this.ws = ws;\n    }\n\n    setCanvas(val) {\n        this.canvas = val;\n        this.context = this.canvas.getContext('2d');\n    }\n\n    down = (e) => {\n        this.toggle = true;\n        this.context.beginPath();\n        this.context.moveTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n        this.ws.send(JSON.stringify({\n            method: 'paint',\n            x: e.pageX - e.target.offsetLeft,\n            y: e.pageY - e.target.offsetTop,\n            action: 'down'\n        }));\n        \n    }\n\n    up = (e) => {\n        this.toggle = false;\n    }\n\n    move = (e) => {\n        if (this.toggle) {\n            this.context.lineTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n            this.ws.send(JSON.stringify({\n                method: 'paint',\n                x: e.pageX - e.target.offsetLeft,\n                y: e.pageY - e.target.offsetTop,\n                action: 'move'\n            }));\n            this.context.stroke();\n            //toolbar.context.fillRect(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop, 2, 2);\n        }\n    }\n\n    draw(x,y, action) {\n        console.log('draw', x, y);\n\n        //this.context.fillRect(x, y, 2, 2);\n        switch (action) {\n            case 'down':\n                this.context.beginPath();\n                this.context.moveTo(x, y);\n                break;\n            case 'move':\n                this.context.lineTo(x, y);\n                this.context.stroke();\n                break;\n        }\n        \n\n        // this.context.beginPath();\n        // this.context.moveTo(x, y);\n        // this.context.lineTo(x, y);\n        // this.context.stroke();\n    }\n}\n\nexport default new Toolbar();"]},"metadata":{},"sourceType":"module"}