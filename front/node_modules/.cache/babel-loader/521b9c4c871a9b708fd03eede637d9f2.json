{"ast":null,"code":"import { makeAutoObservable } from 'mobx';\n\nclass Toolbar {\n  //wsId = null;\n  constructor() {\n    this.toolbar = null;\n    this.canvas = null;\n    this.context = null;\n    this.toggle = false;\n    this.ws = null;\n\n    this.down = e => {\n      this.toggle = true;\n      this.context.beginPath();\n      this.context.moveTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n      this.ws.send(JSON.stringify({\n        method: 'paint',\n        x: e.pageX - e.target.offsetLeft,\n        y: e.pageY - e.target.offsetTop,\n        action: 'down'\n      }));\n    };\n\n    this.up = e => {\n      this.toggle = false;\n    };\n\n    this.move = e => {\n      if (this.toggle) {\n        this.context.lineTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n        this.ws.send(JSON.stringify({\n          method: 'paint',\n          x: e.pageX - e.target.offsetLeft,\n          y: e.pageY - e.target.offsetTop\n        }));\n        this.context.stroke(); //toolbar.context.fillRect(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop, 2, 2);\n      }\n    };\n\n    makeAutoObservable(this);\n  }\n\n  setToolbar(val) {\n    this.toolbar = val;\n  }\n\n  setWs(ws) {\n    this.ws = ws;\n  }\n\n  setCanvas(val) {\n    this.canvas = val;\n    this.context = this.canvas.getContext('2d');\n  }\n\n  draw(x, y) {\n    console.log('draw', x, y);\n    this.context.fillRect(x, y, 2, 2); // this.context.beginPath();\n    // this.context.moveTo(x, y);\n    // this.context.lineTo(x, y);\n    // this.context.stroke();\n  }\n\n}\n\nexport default new Toolbar();","map":{"version":3,"sources":["/home/operator3/Документы/websocket/front/src/store/toolbar.js"],"names":["makeAutoObservable","Toolbar","constructor","toolbar","canvas","context","toggle","ws","down","e","beginPath","moveTo","pageX","target","offsetLeft","pageY","offsetTop","send","JSON","stringify","method","x","y","action","up","move","lineTo","stroke","setToolbar","val","setWs","setCanvas","getContext","draw","console","log","fillRect"],"mappings":"AAAA,SAAQA,kBAAR,QAAiC,MAAjC;;AAEA,MAAMC,OAAN,CAAc;AAMV;AACAC,EAAAA,WAAW,GAAG;AAAA,SANdC,OAMc,GANJ,IAMI;AAAA,SALdC,MAKc,GALL,IAKK;AAAA,SAJdC,OAIc,GAJJ,IAII;AAAA,SAHdC,MAGc,GAHL,KAGK;AAAA,SAFdC,EAEc,GAFT,IAES;;AAAA,SAiBdC,IAjBc,GAiBNC,CAAD,IAAO;AACV,WAAKH,MAAL,GAAc,IAAd;AACA,WAAKD,OAAL,CAAaK,SAAb;AACA,WAAKL,OAAL,CAAaM,MAAb,CAAoBF,CAAC,CAACG,KAAF,GAAUH,CAAC,CAACI,MAAF,CAASC,UAAvC,EAAmDL,CAAC,CAACM,KAAF,GAAUN,CAAC,CAACI,MAAF,CAASG,SAAtE;AACA,WAAKT,EAAL,CAAQU,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAe;AACxBC,QAAAA,MAAM,EAAE,OADgB;AAExBC,QAAAA,CAAC,EAAEZ,CAAC,CAACG,KAAF,GAAUH,CAAC,CAACI,MAAF,CAASC,UAFE;AAGxBQ,QAAAA,CAAC,EAAEb,CAAC,CAACM,KAAF,GAAUN,CAAC,CAACI,MAAF,CAASG,SAHE;AAIxBO,QAAAA,MAAM,EAAE;AAJgB,OAAf,CAAb;AAOH,KA5Ba;;AAAA,SA8BdC,EA9Bc,GA8BRf,CAAD,IAAO;AACR,WAAKH,MAAL,GAAc,KAAd;AACH,KAhCa;;AAAA,SAkCdmB,IAlCc,GAkCNhB,CAAD,IAAO;AACV,UAAI,KAAKH,MAAT,EAAiB;AACb,aAAKD,OAAL,CAAaqB,MAAb,CAAoBjB,CAAC,CAACG,KAAF,GAAUH,CAAC,CAACI,MAAF,CAASC,UAAvC,EAAmDL,CAAC,CAACM,KAAF,GAAUN,CAAC,CAACI,MAAF,CAASG,SAAtE;AACA,aAAKT,EAAL,CAAQU,IAAR,CAAaC,IAAI,CAACC,SAAL,CAAe;AACxBC,UAAAA,MAAM,EAAE,OADgB;AAExBC,UAAAA,CAAC,EAAEZ,CAAC,CAACG,KAAF,GAAUH,CAAC,CAACI,MAAF,CAASC,UAFE;AAGxBQ,UAAAA,CAAC,EAAEb,CAAC,CAACM,KAAF,GAAUN,CAAC,CAACI,MAAF,CAASG;AAHE,SAAf,CAAb;AAKA,aAAKX,OAAL,CAAasB,MAAb,GAPa,CAQb;AACH;AACJ,KA7Ca;;AACV3B,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACH;;AAED4B,EAAAA,UAAU,CAACC,GAAD,EAAM;AACZ,SAAK1B,OAAL,GAAe0B,GAAf;AACH;;AAEDC,EAAAA,KAAK,CAACvB,EAAD,EAAK;AACN,SAAKA,EAAL,GAAUA,EAAV;AACH;;AAEDwB,EAAAA,SAAS,CAACF,GAAD,EAAM;AACX,SAAKzB,MAAL,GAAcyB,GAAd;AACA,SAAKxB,OAAL,GAAe,KAAKD,MAAL,CAAY4B,UAAZ,CAAuB,IAAvB,CAAf;AACH;;AAgCDC,EAAAA,IAAI,CAACZ,CAAD,EAAGC,CAAH,EAAM;AACNY,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBd,CAApB,EAAuBC,CAAvB;AAEA,SAAKjB,OAAL,CAAa+B,QAAb,CAAsBf,CAAtB,EAAyBC,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,EAHM,CAIN;AACA;AACA;AACA;AACH;;AA9DS;;AAiEd,eAAe,IAAIrB,OAAJ,EAAf","sourcesContent":["import {makeAutoObservable} from 'mobx'\n\nclass Toolbar {\n    toolbar = null;\n    canvas = null;\n    context = null;\n    toggle = false;\n    ws = null;\n    //wsId = null;\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    setToolbar(val) {\n        this.toolbar = val;\n    }\n\n    setWs(ws) {\n        this.ws = ws;\n    }\n\n    setCanvas(val) {\n        this.canvas = val;\n        this.context = this.canvas.getContext('2d');\n    }\n\n    down = (e) => {\n        this.toggle = true;\n        this.context.beginPath();\n        this.context.moveTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n        this.ws.send(JSON.stringify({\n            method: 'paint',\n            x: e.pageX - e.target.offsetLeft,\n            y: e.pageY - e.target.offsetTop,\n            action: 'down'\n        }));\n        \n    }\n\n    up = (e) => {\n        this.toggle = false;\n    }\n\n    move = (e) => {\n        if (this.toggle) {\n            this.context.lineTo(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop);\n            this.ws.send(JSON.stringify({\n                method: 'paint',\n                x: e.pageX - e.target.offsetLeft,\n                y: e.pageY - e.target.offsetTop\n            }));\n            this.context.stroke();\n            //toolbar.context.fillRect(e.pageX - e.target.offsetLeft, e.pageY - e.target.offsetTop, 2, 2);\n        }\n    }\n\n    draw(x,y) {\n        console.log('draw', x, y);\n\n        this.context.fillRect(x, y, 2, 2);\n        // this.context.beginPath();\n        // this.context.moveTo(x, y);\n        // this.context.lineTo(x, y);\n        // this.context.stroke();\n    }\n}\n\nexport default new Toolbar();"]},"metadata":{},"sourceType":"module"}