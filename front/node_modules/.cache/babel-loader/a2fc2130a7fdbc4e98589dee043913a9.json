{"ast":null,"code":"var _jsxFileName = \"/home/operatorzhukov/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/websocket/front/src/components/Canvas.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport cl from '../styles/Canvas.module.css';\nimport toolbar from \"../store/toolbar\";\nimport { observer } from \"mobx-react-lite\";\nimport Name from \"./Name\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Test = observer(_c = _s(_ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const canvas = useRef(); //const ctx =  canvas.getContext('2d');\n\n  const [top, setTop] = useState(0);\n  const [left, setLeft] = useState(0);\n  const [display, setDisplay] = useState('none');\n  const [names, setNames] = useState([]);\n  console.log('names', names);\n  useEffect(() => {\n    toolbar.setCanvas(canvas.current);\n    let ws = new WebSocket('ws://localhost:5000/');\n    toolbar.setWs(ws);\n\n    toolbar.ws.onopen = () => {\n      console.log('opened');\n      let id = (Math.random() * 100).toFixed(0);\n      const data = {\n        id: id,\n        method: 'connection',\n        name: 'client' + id\n      };\n      toolbar.ws.send(JSON.stringify(data));\n    };\n\n    toolbar.ws.onmessage = data => {\n      console.log('mes', data);\n      data = JSON.parse(data.data);\n\n      switch (data.method) {\n        case 'paint':\n          toolbar.draw(data.x, data.y, data.action);\n          toolbar.changePositionByName(data.name, data.x, data.u + 100); // setTop(data.y + 100);\n          // setLeft(data.x);\n          // setDisplay('block');\n          //window.getElementById('names').appendChild('div');\n\n          break;\n\n        case 'success':\n          addName(data.name);\n          break;\n      }\n    }; //console.log('canvas', toolbar.canvas);\n\n  }, []);\n  const [toggle, setToggle] = useState(false);\n\n  const addName = name => {\n    setNames([...names, {\n      name,\n      x: 0,\n      y: 0\n    }]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      width: window.innerWidth - 50,\n      height: window.innerHeight - 200,\n      className: cl.Canvas,\n      ref: canvas,\n      onMouseDown: toolbar.down,\n      onMouseUp: toolbar.up,\n      onMouseMove: toolbar.move\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: names.map(nameEl => /*#__PURE__*/_jsxDEV(Name, {\n        name: nameEl.name,\n        left: nameEl.x,\n        top: nameEl.y\n      }, nameEl.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}, \"B+SpVbwu0j3gA5ESaXnX4BD0e8o=\"));\n_c2 = Test;\nexport default Test;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Test$observer\");\n$RefreshReg$(_c2, \"Test\");","map":{"version":3,"sources":["/home/operatorzhukov/Документы/websocket/front/src/components/Canvas.jsx"],"names":["useContext","useEffect","useRef","useState","cl","toolbar","observer","Name","Test","children","canvas","top","setTop","left","setLeft","display","setDisplay","names","setNames","console","log","setCanvas","current","ws","WebSocket","setWs","onopen","id","Math","random","toFixed","data","method","name","send","JSON","stringify","onmessage","parse","draw","x","y","action","changePositionByName","u","addName","toggle","setToggle","justifyContent","alignItems","window","innerWidth","innerHeight","Canvas","down","up","move","map","nameEl"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\nimport cl from '../styles/Canvas.module.css';\nimport toolbar from \"../store/toolbar\";\nimport { observer } from \"mobx-react-lite\";\nimport Name from \"./Name\";\nconst Test = observer(({children}) => {\n    const canvas = useRef();\n    //const ctx =  canvas.getContext('2d');\n    const [top, setTop] = useState(0);\n    const [left, setLeft] = useState(0);\n    const [display, setDisplay] = useState('none');\n    const [names, setNames] = useState([]);\n    console.log('names', names);\n    useEffect(() => {\n        toolbar.setCanvas(canvas.current);\n        let ws = new WebSocket('ws://localhost:5000/');\n        toolbar.setWs(ws);\n        \n        toolbar.ws.onopen = () => {\n            console.log('opened');\n            let id = (Math.random() * 100).toFixed(0);\n            const data = {\n                id: id,\n                method: 'connection',\n                name: 'client' + id\n            }\n            toolbar.ws.send(JSON.stringify(data));\n        }\n\n        toolbar.ws.onmessage = (data) => {\n            console.log('mes', data);\n            data = JSON.parse(data.data);\n            switch (data.method) {\n                case 'paint':\n                    toolbar.draw(data.x, data.y, data.action);\n                    toolbar.changePositionByName(data.name, data.x, data.u + 100);\n                    \n                    // setTop(data.y + 100);\n                    // setLeft(data.x);\n                    // setDisplay('block');\n                    //window.getElementById('names').appendChild('div');\n\n                    break;\n                case 'success':\n                    addName(data.name);\n                    break;\n            }\n        }\n        //console.log('canvas', toolbar.canvas);\n    }, []);\n    const [toggle, setToggle] = useState(false);\n\n    const addName = (name) => {\n        setNames([...names, {name, x: 0, y: 0}]);\n    }\n    return (\n        <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n            <canvas \n                width={window.innerWidth - 50}\n                height={window.innerHeight - 200}\n                className={cl.Canvas}\n                ref={canvas}\n                onMouseDown={toolbar.down}\n                onMouseUp={toolbar.up}\n                onMouseMove={toolbar.move}\n                >\n            </canvas>\n                <div>\n                    {\n                        names.map(nameEl =>\n                            (\n                            <Name\n                                key={nameEl.name}\n                                name={nameEl.name}\n                                left={nameEl.x}\n                                top={nameEl.y}\n                            />)\n                        )\n                    }\n                </div>\n            {/* <div className={cl.Name} style={{display: display, top, left}}>{toolbar.name}</div> */}\n        </div>\n\n    )\n});\n\nexport default Test"]},"metadata":{},"sourceType":"module"}